# В филармонии К музыкальных инструментов (музыкантов). Сформировать все возможные варианты квинтетов.
# Условие: в квинтете должно содержаться как минимум духовой и струнный инструменты.
# Целевая функция: вывод максимального ценника
from itertools import combinations
import random

K = int(input("Введите количество инструментов: ")) # Кол-во инструментов
M = 5 # Квинтет
def quintet(M, K):
    def check_quintet(quintet):
        strun_instr = False
        dux_instr = False
        for instr in quintet:
            if instr in [2]:  # Проверка на струнный инструмент
                strun_instr = True
            if instr in [5]:  # Проверка на духовой инструмент
                dux_instr = True
        return strun_instr and dux_instr

    quintets = list(combinations(range(K), M))
    valid_quintets = [q for q in quintets if check_quintet(q)]

    return valid_quintets

valid_quintets = quintet(M, K)
if not valid_quintets:
    print("Вариантов создания квинтетов нет.")
else:
    print("Возможные варианты квинтетов:")
    print(valid_quintets)

# Целевая функция: Вывод максимального ценника квинтета
def calculate_price(quintet):
    count_strun = len([instr for instr in quintet if instr == 2])
    count_dux = len([instr for instr in quintet if instr == 5])
    if count_strun == 0 or count_dux == 0:
        price = random.randint(400,700)
    else:
        price = random.randint(900,1200)
    return price

print("\nРассчитывание стоимости квинтетов:")
prices = {}
max_price = 0
max_price_quintet = None
for quintet in valid_quintets:
    price = calculate_price(quintet)
    prices[quintet] = price
    if price > max_price:
        max_price = price
        max_price_quintet = quintet
if not valid_quintets:
    print(f"Цены нет")

for quintet, price in prices.items():
    if valid_quintets:
        print(f"Квинтет {quintet}: Цена = {price}")

if valid_quintets:
    print(f"Самый дорогой квинтет : {max_price_quintet}. Его цена составляет: {max_price}")
