# Задана рекуррентная функция. Область определения функции – натуральные числа.
# Написать программу сравнительного вычисления данной функции рекурсивно и итерационно. Определить границы применимости рекурсивного и итерационного подхода.
# Результаты сравнительного исследования времени вычисления представить в табличной и графической форме в виде отчета по лабораторной работе.

# Вариант 17
# F(1) = 1; G(1) = 1; F(n) = (-1)n*(F(n–1) – 2*G(n–1))/(2n+3)!, G(n) = F(n–1) , при n >=2
import time
import matplotlib.pyplot as plt
from functools import lru_cache
k = 1 # Ответ пользователя
p = 1 # Переменная для определения знака

# Факториал для рекурсии
def rec_factor(number):
    if number == 1:
        return 1
    else:
        return number * rec_factor(number-1)

# Нахождение F рекурсивно
lru_cache(maxsize=128)
def F_rec(n,p):
    if n == 1:
        return 1
    else:
        p *= -1
        return p * (F_rec(n-1,p) - 2*G_rec(n-1,p))/(rec_factor(2*n+3))

# Нахождение G рекурсивно
lru_cache(maxsize=128)
def G_rec(n,p):
    if n == 1:
        return 1
    else:
        return F_rec(n-1,p)

# Факториал для итерации
@lru_cache(maxsize=128)
def it_factor(n):
    res = n
    for i in range(1,n):
        res = res * (i+1)
    return res

# Нахождение F и G итерационно
def F_iter(n):
    F = [0]*(n+1)
    F[1] = 1
    G = [0]*(n+1)
    G[1] = 1
    p = 1
    for i in range(2, n+1):
        F[i] = p * (F[i-1] - 2*G[i-1])//(it_factor(2*i+3))
        G[i] = F[i-1]
        p *= -1
    return F[n], G[n]

# Ввод числа N и S
n = int(input('Введите натуральное число n, для функции: F(n < 2) = 100; F(n) = -(F(n - 1) + F(n - 5)): '))
while n < 1:
    n = int(input('Введите число n больше 0. Рассматривается только последовательность натуральных чисел: '))

s = int(input('\nВведите натуральное число s, являющееся шагом в сравнительной таблице и графике: '))
while s < 1:
    s = int(input('Введите шаг графика >= 1: '))

# Cписки для нахождения времени
timer=[]
timer_rec=[]
graf = list(range(1, n + 1,s))

# Выбор выполнения программы
o = int(input('\nДля какой функции вы хотите выполнить программу? '
                  '( Рекурсивной = 0 | Итерационной = 1 | Для обеих = 2 ): '))
while o != 0 and o != 1 and o != 2:
    o = int(input('\nПринимаются только значения "0", "1" или "2": '))

# Вычисление времени + Графики
if (n >=  33 and (o == 0 or o == 2)) or (n >= 5000 and (o == 1 or o == 2)):
    k = int(input('\nЧисло n слишком большое. Работа программы может занять существенное время.'
                  ' Хотите получить результат? ( Да = 1 | Нет = 0 ): '))
    while k != 0 and k != 1:
        k = int(input('\nПринимаются только значения "1" или "0": '))

if o == 0 and k == 1:
    for i in graf:
        start = time.time()
        res = F_rec(i,p)
        end = time.time()
        timer.append(end-start)
        rec_times = end - start
        print('№',i,"Результат рекурсии = ",res,"\nВремя выполнения = ",end-start,"\n\n")
    # Графики
    plt.plot(graf, timer, label='Рекурсионная функция.')
    plt.legend(loc=2)

if o == 1 and k == 1:
    for i in graf:
        start = time.time()
        result = F_iter(i)
        end = time.time()
        timer.append(end - start)
        iter_times = end - start
        print('№',i,"Результат итерации = ",result,"\nВремя выполнения = ",end-start,"\n\n")
    # Графики
    plt.plot(graf, timer, label='Итерационная функция.')
    plt.legend(loc=2)

if o == 2 and k == 1:
    for i in graf:
        start = time.time()
        result = F_iter(i)
        end = time.time()
        timer.append(end-start)
        start_rec = time.time()
        res = F_rec(i,p)
        end_rec = time.time()
        timer_rec.append(end_rec-start_rec)
        rec_times = end_rec-start_rec
        iter_times = end-start
        print("\n",'№',i,"Результат рекурсии = ", res,"---------Результат итерации = ",result,"-----------Время  Рекурсии = ",end_rec-start_rec,"-------Время  Итерации = ",end-start)
    # Графики
    plt.plot(graf, timer, label='Итерационная функция.')
    plt.plot(graf, timer_rec, label='Рекусионная функция.')
    plt.legend(loc=2)

plt.xlabel('Значение n')
plt.ylabel('Время выполнения (c)')
plt.show()
