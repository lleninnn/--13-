"""
Написать программу, которая читая символы из бесконечной последовательности (эмулируется конечным файлом, читающимся поблочно), распознает, преобразует и выводит на экран лексемы по определенному правилу. Лексемы разделены пробелами. Преобразование делать по возможности через словарь. 
Для упрощения под выводом числа прописью подразумевается последовательный вывод всех цифр числа.
Регулярные выражения использовать нельзя.Натуральные числа. Выводит на экран нечетные числа, переведя их К-ичную систему счисления (К<10). Минимальное число выводится прописью.
"""
def convert_to_base_k(number, k):
    result = ""
    while number > 0:
        digit = number % k
        result = str(digit) + result
        number = number // k
    return int(result)

numbers_dict = {0: "ноль", 1: "один", 2: "два", 3: "три", 4: "четыре", 5: "пять", 6: "шесть", 7: "семь", 8: "восемь", 9: "девять"}

f = True
k = int(input())
s = open("input.txt").read()
if len(s) == 0:
    print("файл пустой")
with open("input.txt", encoding='utf-8') as file:
    current_number = ""
    while True:
        block = file.read()  # Чтение блока из файла
        if not block:  # Если блок пустой, файл закончился
            break
        for char in block:
            if char.isdigit():  # Если символ является цифрой, добавляем его к текущему числу
                current_number += char
            elif char == " ":
                if current_number != "":
                    number = int(current_number)
                    if number % 2 != 0:   # Если число нечетное
                        # Переводим число в К-ичную систему счисления и выводим его прописью
                        base_k_number = convert_to_base_k(number, k)
                        digits = [int(digit) for digit in str(base_k_number)]
                        lexemes = [numbers_dict[digit] for digit in digits]
                        print(" ".join(lexemes))
                    current_number = ""
    # Проверяем последнее число после окончания файла
    if current_number != "":
        number = int(current_number)
        if number % 2 != 0:
            base_k_number = convert_to_base_k(number, k)
            digits = [int(digit) for digit in str(base_k_number)]
            lexemes = [numbers_dict[digit] for digit in digits]
            mn = min(digits)
            print(*digits)
            print(numbers_dict[mn])
