# Импортируем необходимые модули
import csv
import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt

# Класс для представления товара
class Product:
    def __init__(self, name, category, price,quantity):
        self.name = name
        self.category = category
        self.price = float(price) if price else None
        self.quantity = int(quantity) if quantity else None

    # Метод для вывода информации о товаре
    def __str__(self):
        return f'{self.name}: Категория - {self.category}, Цена - {self.price}'

# Функция для чтения данных из CSV файла
def read_csv_file():
    with open('products.csv', 'r') as file:
        reader = csv.DictReader(file)
        products = []
        for row in reader:
            product = Product(row['Name'], row['Category'], row['Price'],row['Quantity'])
            products.append(product)
        return products

# Функция для сегментации товаров по категориям
def segment_by_categories(products):
    categories = {}
    for product in products:
        if product.category not in categories:
            categories[product.category] = []
        categories[product.category].append(product)
    return categories

# Функция для сегментации товаров по продажам
def segment_by_sales(products):
    sales = {}
    for product in products:
        if product.price is not None:
            total_sales = product.price * int(product.quantity)
            if total_sales not in sales:
                sales[total_sales] = []
            sales[total_sales].append(product)
    return sales

# Функция для сегментации товаров по продажам и последующей визуализации
def perform_segmentation_by_sales():
    global sales
    sales = segment_by_sales(products)
    visualize_segmentation_by_sales(sales)

# Функция для сегментации товаров по категориям и последующей визуализации
def perform_segmentation_by_categories():
    global categories
    categories = segment_by_categories(products)
    visualize_segmentation_by_categories(categories)

# Функция для визуализации распределения товаров по категориям
def visualize_segmentation_by_categories(categories):
    labels = list(categories.keys())
    sizes = [len(categories[label]) for label in labels]
    explode = [0.1] * len(labels)
    fig1, ax1 = plt.subplots()
    ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', startangle=90)
    ax1.axis('equal')  # Для получения равномерной диаграммы
    plt.title("Сегментация товаров по категориям")
    plt.show()

# Функция для визуализации распределения товаров по продажам
def visualize_segmentation_by_sales(sales):
    values = list(sales.keys())
    counts = [len(sales[value]) for value in values]
    explode = [0.1] * len(values)
    fig2, ax2 = plt.subplots()
    ax2.pie(counts, explode=explode, labels=values, autopct='%1.1f%%', startangle=90)
    ax2.axis('equal')  # Для получения равномерной диаграммы
    plt.title("Сегментация товаров по продажам")
    plt.show()

# Создаем графический интерфейс с помощью библиотеки tkinter
root = tk.Tk()
root.title("Анализ товаров")

# Окно с информацией о товарах
info_frame = tk.Frame(root)
info_frame.pack(padx=10, pady=10)
tk.Label(info_frame, text="Информация о товарах").pack()

# Кнопка для загрузки данных из CSV файла
load_button = tk.Button(info_frame, text="Загрузить данные", command=lambda: load_data())
load_button.pack(pady=(10, 0))

# Виджет для отображения результатов сегментации по категориям
segment_categories_frame = tk.Frame(root)
segment_categories_frame.pack(padx=10, pady=10)
tk.Label(segment_categories_frame, text="Сегментация по категориям").pack()

# Кнопка для запуска сегментации по категориям
segment_categories_button = tk.Button(segment_categories_frame, text="Выполнить сегментацию",
                                      command=lambda: perform_segmentation_by_categories())
segment_categories_button.pack(pady=(10, 0))

# Виджет для отображения результатов сегментации по продажам
segment_sales_frame = tk.Frame(root)
segment_sales_frame.pack(padx=10, pady=10)
tk.Label(segment_sales_frame, text="Сегментация по продажам").pack()

# Кнопка для запуска сегментации по продажам
segment_sales_button = tk.Button(segment_sales_frame, text="Выполнить сегментацию",
                                 command=lambda: perform_segmentation_by_sales())
segment_sales_button.pack(pady=(10, 0))

# Виджет для отображения круговой диаграммы по категориям
visualization_categories_frame = tk.Frame(root)
visualization_categories_frame.pack(padx=10, pady=10)
tk.Label(visualization_categories_frame, text="Визуализация сегментации по категориям").pack()

# Кнопка для запуска визуализации сегментации по категориям
visualize_categories_button = tk.Button(visualization_categories_frame, text="Показать диаграмму",
                                        command=lambda: visualize_segmentation_by_categories(categories))
visualize_categories_button.pack(pady=(10, 0))

# Виджет для отображения круговой диаграммы по продажам
visualization_sales_frame = tk.Frame(root)
visualization_sales_frame.pack(padx=10, pady=10)
tk.Label(visualization_sales_frame, text="Визуализация сегментации по продажам").pack()

# Кнопка для запуска визуализации сегментации по продажам
visualize_sales_button = tk.Button(visualization_sales_frame, text="Показать диаграмму",
                                   command=lambda: visualize_segmentation_by_sales(sales))
visualize_sales_button.pack(pady=(10, 0))

# Функция для загрузки данных из CSV файла
def load_data():
    global products
    try:
        products = read_csv_file()
        info_label = ttk.Label(info_frame, text=f"Загружено {len(products)} товаров.")
        info_label.pack()
    except FileNotFoundError:
        info_label = ttk.Label(info_frame, text="Файл не найден!")
        info_label.pack()

# Основной цикл программы
if __name__ == "__main__":
    root.mainloop()
