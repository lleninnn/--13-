# 2 часть – написать программу в соответствии со своим вариантом задания.
# Усложнить написанную программу, введя по своему усмотрению в условие минимум одно ограничение на характеристики объектов (которое будет сокращать количество переборов)...
# ...и целевую функцию для нахождения оптимального  решения.
# Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
# Вариант 17. В филармонии К музыкальных инструментов (музыкантов). Сформировать все возможные варианты квинтетов.
import time
from itertools import combinations
import random

K = int(input("Введите количество инструментов: ")) # Кол-во инструментов
M = 5 # Квинтет

# Вариант алгоритмический (усложнённый)
start_time = time.time() # Начало времени
def quintet(M, K):
    quintets = []
    for i in range(M):
        quintets.append(i)
    quintets.append(K)
    quintets.append(0)

    def check_quintet(quintet):
        strun = 0
        dux = 0
        for element in quintet:
            if element == 2:
                strun += 1
            elif element == 5:
                dux += 1
        return strun >= 1 and dux >= 1

    while True:
        if check_quintet(quintets[0:M]):
            print(quintets[0:M])
        for j in range(len(quintets) - 1):
            if quintets[j] + 1 == quintets[j + 1]:
                quintets[j] = j
            else:
                break
        if j < M:
            quintets[j] += 1
        else:
            break

stop_time = time.time() # Конец времени

if K <= M:
    print("Алгоритмический подход:")
    print("Вариантов создания квинтетов нет.")
else:
    print("Алгоритмический подход:")
    print("Возможные варианты квинтетов:")
    quintet(M,K)
    print("Время выполнения алгоритмического варианта:", stop_time - start_time,"cек.")

# Вариант с помощью функций Python(усложнённый)
def quintet(M, K):
    def check_quintet(quintet):
        strun_instr = False
        dux_instr = False
        for instr in quintet:
            if instr in [2]:  # Проверка на струнный инструмент
                strun_instr = True
            if instr in [5]:  # Проверка на духовой инструмент
                dux_instr = True
        return strun_instr and dux_instr

    quintets = list(combinations(range(K), M))
    valid_quintets = [q for q in quintets if check_quintet(q)]

    return valid_quintets


print("Функциональный подход:")
start_time = time.time()
valid_quintets = quintet(M, K)
if not valid_quintets:
    print("Вариантов создания квинтетов нет.")
else:
    print("Возможные варианты квинтетов:")
    print(valid_quintets)
stop_time = time.time()
print("Время выполнения алгоритмического варианта:", stop_time - start_time, "cек.")


# Целевая функция: Вывод максимального ценника квинтета
def calculate_price(quintet):
    count_strun = len([instr for instr in quintet if instr == 2])
    count_dux = len([instr for instr in quintet if instr == 5])
    if count_strun == 0 or count_dux == 0:
        price = random.randint(400,700)
    else:
        price = random.randint(900,1200)
    return price


print("\nРассчитывание стоимости квинтетов:")
prices = {}
max_price = 0
max_price_quintet = None
for quintet in valid_quintets:
    price = calculate_price(quintet)
    prices[quintet] = price
    if price > max_price:
        max_price = price
        max_price_quintet = quintet
if not valid_quintets:
    print(f"Цены нет")

for quintet, price in prices.items():
    if valid_quintets:
        print(f"Квинтет {quintet}: Цена = {price}")

if valid_quintets:
    print(f"Самый дорогой квинтет : {max_price_quintet}. Его цена составляет {max_price}")
