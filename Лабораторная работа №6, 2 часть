# 2 часть – написать программу в соответствии со своим вариантом задания.
# Усложнить написанную программу, введя по своему усмотрению в условие минимум одно ограничение на характеристики объектов (которое будет сокращать количество переборов)...
# ...и целевую функцию для нахождения оптимального  решения.
# Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
# Вариант 17. В филармонии К музыкальных инструментов (музыкантов). Сформировать все возможные варианты квинтетов.
# Целевая функция: найти оптимальное сочетание инструментов для формирования квинтетов.

import time
from itertools import combinations

K = int(input("Введите количество инструментов: ")) # Кол-во инструментов
M = 5 # Квинтет

# Вариант алгоритмический (усложнённый)
start_time = time.time() # Начало времени
def quintet(M, K):
    quintets = []
    for i in range(M):
        quintets.append(i)
    quintets.append(K)
    quintets.append(0)

    def check_quintet(quintet):
        strun = 0
        dux = 0
        for element in quintet:
            if element == 2:
                strun += 1
            elif element == 5:
                dux += 1
        return strun >= 1 and dux >= 1

    while True:
        if check_quintet(quintets[0:M]):
            print(quintets[0:M])
        for j in range(len(quintets) - 1):
            if quintets[j] + 1 == quintets[j + 1]:
                quintets[j] = j
            else:
                break
        if j < M:
            quintets[j] += 1
        else:
            break

stop_time = time.time() # Конец времени
if K <= M:
    print("Алгоритмический подход:")
    print("Вариантов создания квинтетов нет.")
else:
    print("Алгоритмический подход:")
    print("Возможные варианты квинтетов:")
    quintet(M,K)
    print("Время выполнения алгоритмического варианта:", stop_time - start_time,"cек.")

# Вариант с помощью функций Python(усложнённый)
def quintet(M, K):
    def check_quintet(quintet):
        strun_instr = False
        dux_instr = False
        for instr in quintet:
            if instr in [2]:  # Проверка на струнный инструмент
                strun_instr = True
            if instr in [5]:  # Проверка на духовой инструмент
                dux_instr = True
        return strun_instr and dux_instr

    quintets = list(combinations(range(K), M))
    valid_quintets = [q for q in quintets if check_quintet(q)]

    return valid_quintets


print("Функциональный подход:")
start_time = time.time()
valid_quintets = quintet(M, K)
if not valid_quintets:
    print("Вариантов создания квинтетов нет.")
else:
    print("Возможные варианты квинтетов:")
    print(valid_quintets)
stop_time = time.time()
print("Время выполнения алгоритмического варианта:", stop_time - start_time, "cек.")
